import { Injectable } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';
import { Request } from 'express';
import { DomainException } from '../../../../core/exeptions/domain-exeptions';
import { DomainExceptionCode } from '../../../../core/exeptions/domain-exeption-codes';
import { SessionRepository } from '../../sessions/infrastructure/sessions.repository';

@Injectable()
export class RefreshTokenStrategy extends PassportStrategy(
  Strategy,
  'refresh-jwt',
) {
  constructor(private sessionRepository: SessionRepository) {
    super({
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
      jwtFromRequest: ExtractJwt.fromExtractors([
        (request: Request) => {
          return request?.cookies?.refreshToken;
        },
      ]),
      ignoreExpiration: false,
      secretOrKey: 'refresh-token-secret', // –î–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å REFRESH_TOKEN_SECRET
      passReqToCallback: true, // –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ request –≤ validate
    });
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è payload –∏–∑ refresh token
   * @param req –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
   * @param payload –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
   */
  async validate(
    req: Request,
    payload: { userId: string; deviceId: string },
  ): Promise<{ userId: string; deviceId: string; refreshToken: string }> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    console.log('–ø–æ–ø–∞–ª –∫–æ–æ–¥');
    if (!payload.userId || !payload.deviceId) {
      throw new DomainException({
        code: DomainExceptionCode.Unauthorized,
        message: 'Invalid token payload',
      });
    }
    console.log('–ø–µ—Ä–≤—É—é –ø—Ä–æ—à–µ–ª');
    const refreshToken = req.cookies?.refreshToken;
    if (!refreshToken) {
      throw new DomainException({
        code: DomainExceptionCode.Unauthorized,
        message: 'Refresh token not found in cookies',
      });
    }
    console.log('refreshToken');
    const session = await this.sessionRepository.findByDeviceId(
      payload.deviceId,
    );

    //if (
    //!session ||
    // session.deletedAt !== null ||
    // session.userId !== payload.userId
    // ) {
    //console.log('–≤–æ—Ç –∏ –æ—à–∏–±–∫–∞');
    //throw new DomainException({
    // code: DomainExceptionCode.Unauthorized,
    // message: 'Invalid or expired refresh token',
    //});
    //}
    console.log('üéØ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ session');

    // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –æ–¥–Ω–æ–π —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É
    if (!session) {
      console.log('‚ùå FAIL: !session');
      throw new DomainException({
        code: DomainExceptionCode.Unauthorized,
        message: 'Invalid or expired refresh token',
      });
    }

    console.log('‚úÖ PASS: session —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    if (session.deletedAt !== null) {
      console.log('‚ùå FAIL: session.deletedAt !== null');
      throw new DomainException({
        code: DomainExceptionCode.Unauthorized,
        message: 'Invalid or expired refresh token',
      });
    }

    console.log('‚úÖ PASS: session –Ω–µ —É–¥–∞–ª–µ–Ω–∞');

    if (session.userId !== payload.userId) {
      console.log('‚ùå FAIL: session.userId !== payload.userId');
      throw new DomainException({
        code: DomainExceptionCode.Unauthorized,
        message: 'Invalid or expired refresh token',
      });
    }

    console.log('‚úÖ PASS: userId —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    console.log('üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    console.log('–ø—Ä–æ–≤–µ—Ä–∫–∞!');
    if (session.refreshToken !== refreshToken) {
      throw new DomainException({
        code: DomainExceptionCode.Unauthorized,
        message: 'Invalid or expired refresh token',
      });
    }
    console.log('–ø—Ä–æ–≤–µ—Ä–∫–∞2!', session.refreshToken);
    return {
      userId: payload.userId,
      deviceId: payload.deviceId,
      refreshToken: refreshToken,
    };
  }
}
